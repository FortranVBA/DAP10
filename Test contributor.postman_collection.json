{
	"info": {
		"_postman_id": "e6772bcf-024a-45d4-8940-3326e3d5207f",
		"name": "Test contributor",
		"description": "# Soft Desk API\n\n## Overview\n\nSoft Desk API is a back-end application to be executed locally in the context of OpenClassroom educational project. \nIt allow registered users to report and follow project related issues.\nRegistered users can create projects, add project contributors, create project issues and create issue comments.\nThis application has been developed with the Django rest framework, using SQlite database.\n\n## Local server installation and usage\n\nPlease refer to the application README.md for application installation and usage.\n\n## Error codes\n\n**404**: One of the id request (stored in variables `project_id`, `user_id`, `issue_id` or `comment_id`) refer to a non existant object.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ProjectMaker",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", jsonData.access);\r",
									"pm.collectionVariables.set(\"token_refresh\", jsonData.refresh);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "ProjectMaker",
									"type": "text"
								},
								{
									"key": "password",
									"value": "a1z2e3r4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login",
								""
							]
						},
						"description": "Login as a previously registered user.\n\n### Expected fields in request body\n\n- **username** : Username of the previously registered user.\n- **password** : Password of the previously registered user.\n\n### Keys returned in response body\n\n- **refresh** : Refresh token to be used for refreshing login end point. The value is automatically assigned to the collection variable `token_refresh`.\n- **access** : Access token to be used for authentification. The value is automatically assigned to the collection variable `token`."
					},
					"response": []
				},
				{
					"name": "refresh login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", jsonData.access);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh",
									"value": "{{token_refresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login/refresh/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login",
								"refresh",
								""
							]
						},
						"description": "Refresh access for previously logged user.\n\n### Expected fields in request body\n\n- **refresh** : Refresh token value of the previously logged user.\n\n### Keys returned in response body\n\n- **access** : Access token to be used for authentification. The value is automatically assigned to the collection variable `token`."
					},
					"response": []
				},
				{
					"name": "list projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"//if (jsonData.lenght > 0){\r",
									"pm.collectionVariables.set(\"project_id\", jsonData[0].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								""
							]
						},
						"description": "List all projects from wich current user is an assigned contributor or author.\nThe collection variable `project_id` is automatically set as the 1st project id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated.\n\n### Keys returned in response body\n\nList of project with following data :\n- **id** : Id number of project.\n- **title** : Title of the new project.\n- **description** : Description of the new project.\n- **type** : Type of the new project: accepted values are `back-end`, `front-end`, `iOS` or `Android`."
					},
					"response": []
				},
				{
					"name": "list contributors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id\", jsonData[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "List all contributors of the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\nThe collection variable `user_id` is automatically set as the 1st contributor id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Keys returned in response body\n\nList of contributors with following data :\n- **id** : Id number of the contribution.\n- **user** : Id number of user contributor.\n- **project** : Id number of the related project.\n- **permission** : Permission of the contributor: values are `author` or `contributor`.\n- **role** : Role of the contributor: values are `Creator` or `Contributor`."
					},
					"response": []
				},
				{
					"name": "add contributor",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Contributor",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "Add a new contributor to the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Expected fields in request body\n\n- **user** : Username of the contributor to be added."
					},
					"response": []
				},
				{
					"name": "delete contributor",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/{{user_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								"{{user_id}}",
								""
							]
						},
						"description": "Delete contributor with id `user_id`. The collection variables `project_id`/`user_id` are automatically set as the 1st item id in the list when the request list projects/contributors is called (the values can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be the author of the project.\n\n### Response\n\nIf delete operation is successful, the code 201 is returned."
					},
					"response": []
				}
			]
		},
		{
			"name": "Contributor",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", jsonData.access);\r",
									"pm.collectionVariables.set(\"token_refresh\", jsonData.refresh);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Contributor",
									"type": "text"
								},
								{
									"key": "password",
									"value": "a1z2e3r4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login",
								""
							]
						},
						"description": "Login as a previously registered user.\n\n### Expected fields in request body\n\n- **username** : Username of the previously registered user.\n- **password** : Password of the previously registered user.\n\n### Keys returned in response body\n\n- **refresh** : Refresh token to be used for refreshing login end point. The value is automatically assigned to the collection variable `token_refresh`.\n- **access** : Access token to be used for authentification. The value is automatically assigned to the collection variable `token`."
					},
					"response": []
				},
				{
					"name": "refresh login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", jsonData.access);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh",
									"value": "{{token_refresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login/refresh/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login",
								"refresh",
								""
							]
						},
						"description": "Refresh access for previously logged user.\n\n### Expected fields in request body\n\n- **refresh** : Refresh token value of the previously logged user.\n\n### Keys returned in response body\n\n- **access** : Access token to be used for authentification. The value is automatically assigned to the collection variable `token`."
					},
					"response": []
				},
				{
					"name": "list projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"//if (jsonData.lenght > 0){\r",
									"pm.collectionVariables.set(\"project_id\", jsonData[0].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								""
							]
						},
						"description": "List all projects from wich current user is an assigned contributor or author.\nThe collection variable `project_id` is automatically set as the 1st project id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated.\n\n### Keys returned in response body\n\nList of project with following data :\n- **id** : Id number of project.\n- **title** : Title of the new project.\n- **description** : Description of the new project.\n- **type** : Type of the new project: accepted values are `back-end`, `front-end`, `iOS` or `Android`."
					},
					"response": []
				},
				{
					"name": "list contributors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id\", jsonData[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "List all contributors of the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\nThe collection variable `user_id` is automatically set as the 1st contributor id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Keys returned in response body\n\nList of contributors with following data :\n- **id** : Id number of the contribution.\n- **user** : Id number of user contributor.\n- **project** : Id number of the related project.\n- **permission** : Permission of the contributor: values are `author` or `contributor`.\n- **role** : Role of the contributor: values are `Creator` or `Contributor`."
					},
					"response": []
				},
				{
					"name": "add contributor",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Contributor",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "Add a new contributor to the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Expected fields in request body\n\n- **user** : Username of the contributor to be added."
					},
					"response": []
				},
				{
					"name": "delete contributor",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/{{user_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								"{{user_id}}",
								""
							]
						},
						"description": "Delete contributor with id `user_id`. The collection variables `project_id`/`user_id` are automatically set as the 1st item id in the list when the request list projects/contributors is called (the values can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be the author of the project.\n\n### Response\n\nIf delete operation is successful, the code 201 is returned."
					},
					"response": []
				}
			]
		},
		{
			"name": "NonContributor",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", jsonData.access);\r",
									"pm.collectionVariables.set(\"token_refresh\", jsonData.refresh);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "NonContributor",
									"type": "text"
								},
								{
									"key": "password",
									"value": "a1z2e3r4",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login",
								""
							]
						},
						"description": "Login as a previously registered user.\n\n### Expected fields in request body\n\n- **username** : Username of the previously registered user.\n- **password** : Password of the previously registered user.\n\n### Keys returned in response body\n\n- **refresh** : Refresh token to be used for refreshing login end point. The value is automatically assigned to the collection variable `token_refresh`.\n- **access** : Access token to be used for authentification. The value is automatically assigned to the collection variable `token`."
					},
					"response": []
				},
				{
					"name": "refresh login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", jsonData.access);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "refresh",
									"value": "{{token_refresh}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login/refresh/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login",
								"refresh",
								""
							]
						},
						"description": "Refresh access for previously logged user.\n\n### Expected fields in request body\n\n- **refresh** : Refresh token value of the previously logged user.\n\n### Keys returned in response body\n\n- **access** : Access token to be used for authentification. The value is automatically assigned to the collection variable `token`."
					},
					"response": []
				},
				{
					"name": "list projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"//if (jsonData.lenght > 0){\r",
									"pm.collectionVariables.set(\"project_id\", jsonData[0].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								""
							]
						},
						"description": "List all projects from wich current user is an assigned contributor or author.\nThe collection variable `project_id` is automatically set as the 1st project id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated.\n\n### Keys returned in response body\n\nList of project with following data :\n- **id** : Id number of project.\n- **title** : Title of the new project.\n- **description** : Description of the new project.\n- **type** : Type of the new project: accepted values are `back-end`, `front-end`, `iOS` or `Android`."
					},
					"response": []
				},
				{
					"name": "list contributors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id\", jsonData[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "List all contributors of the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\nThe collection variable `user_id` is automatically set as the 1st contributor id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Keys returned in response body\n\nList of contributors with following data :\n- **id** : Id number of the contribution.\n- **user** : Id number of user contributor.\n- **project** : Id number of the related project.\n- **permission** : Permission of the contributor: values are `author` or `contributor`.\n- **role** : Role of the contributor: values are `Creator` or `Contributor`."
					},
					"response": []
				},
				{
					"name": "add contributor",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Contributor",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "Add a new contributor to the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Expected fields in request body\n\n- **user** : Username of the contributor to be added."
					},
					"response": []
				},
				{
					"name": "delete contributor",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/{{user_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								"{{user_id}}",
								""
							]
						},
						"description": "Delete contributor with id `user_id`. The collection variables `project_id`/`user_id` are automatically set as the 1st item id in the list when the request list projects/contributors is called (the values can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be the author of the project.\n\n### Response\n\nIf delete operation is successful, the code 201 is returned."
					},
					"response": []
				}
			]
		},
		{
			"name": "Unregistered",
			"item": [
				{
					"name": "list projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"//if (jsonData.lenght > 0){\r",
									"pm.collectionVariables.set(\"project_id\", jsonData[0].id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								""
							]
						},
						"description": "List all projects from wich current user is an assigned contributor or author.\nThe collection variable `project_id` is automatically set as the 1st project id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated.\n\n### Keys returned in response body\n\nList of project with following data :\n- **id** : Id number of project.\n- **title** : Title of the new project.\n- **description** : Description of the new project.\n- **type** : Type of the new project: accepted values are `back-end`, `front-end`, `iOS` or `Android`."
					},
					"response": []
				},
				{
					"name": "list contributors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id\", jsonData[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "List all contributors of the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\nThe collection variable `user_id` is automatically set as the 1st contributor id in the list (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Keys returned in response body\n\nList of contributors with following data :\n- **id** : Id number of the contribution.\n- **user** : Id number of user contributor.\n- **project** : Id number of the related project.\n- **permission** : Permission of the contributor: values are `author` or `contributor`.\n- **role** : Role of the contributor: values are `Creator` or `Contributor`."
					},
					"response": []
				},
				{
					"name": "add contributor",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Contributor",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								""
							]
						},
						"description": "Add a new contributor to the project with id `project_id`.\nThe collection variable `project_id` is automatically set as the 1st project id in the list when the request list projects is called (this value can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be a contributor or the author of the project.\n\n### Expected fields in request body\n\n- **user** : Username of the contributor to be added."
					},
					"response": []
				},
				{
					"name": "delete contributor",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "http://127.0.0.1:8000/projects/{{project_id}}/users/{{user_id}}/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"projects",
								"{{project_id}}",
								"users",
								"{{user_id}}",
								""
							]
						},
						"description": "Delete contributor with id `user_id`. The collection variables `project_id`/`user_id` are automatically set as the 1st item id in the list when the request list projects/contributors is called (the values can be override in the collection tab if needed).\n\n### Authentification\n\nRequires bearer token authentification (value is stored in collection variable `token` during login.\n\n### Permission\nThe user must be authenticated and must be the author of the project.\n\n### Response\n\nIf delete operation is successful, the code 201 is returned."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "token_refresh",
			"value": ""
		},
		{
			"key": "project_id",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "issue_id",
			"value": ""
		},
		{
			"key": "comment_id",
			"value": ""
		}
	]
}